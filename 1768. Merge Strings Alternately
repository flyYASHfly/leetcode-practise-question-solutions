1768. Merge Strings Alternately
Solved
Easy
Topics
Companies
Hint
You are given two strings word1 and word2. Merge the strings by adding letters in alternating order, starting with word1. If a string is longer than the other, append the additional letters onto the end of the merged string.

Return the merged string.

 

Example 1:

Input: word1 = "abc", word2 = "pqr"
Output: "apbqcr"
Explanation: The merged string will be merged as so:
word1:  a   b   c
word2:    p   q   r
merged: a p b q c r
Example 2:

Input: word1 = "ab", word2 = "pqrs"
Output: "apbqrs"
Explanation: Notice that as word2 is longer, "rs" is appended to the end.
word1:  a   b 
word2:    p   q   r   s
merged: a p b q   r   s
Example 3:

Input: word1 = "abcd", word2 = "pq"
Output: "apbqcd"
Explanation: Notice that as word1 is longer, "cd" is appended to the end.
word1:  a   b   c   d
word2:    p   q 
merged: a p b q c   d
 

Constraints:

1 <= word1.length, word2.length <= 100
word1 and word2 consist of lowercase English letter


solution : 
class Solution {
public:
    string mergeAlternately(string word1, string word2) {
        string merger;

        // Case when word1 is longer
        if (word1.size() > word2.size()) {
            for (int i = 0; i < word1.size(); i++) {
                // Add characters from word1 if valid
                merger.push_back(word1[i]);
                // Add characters from word2 only if within bounds
                if (i < word2.size()) {
                    merger.push_back(word2[i]);
                }
            }
        }

        // Case when both words are the same size
        else if (word1.size() == word2.size()) {
            for (int i = 0; i < word1.size(); i++) {
                merger.push_back(word1[i]);
                merger.push_back(word2[i]);
            }
        }

        // Case when word2 is longer
        else { // word1.size() < word2.size()
            for (int i = 0; i < word2.size(); i++) {
                // Add characters from word1 only if within bounds
                if (i < word1.size()) {
                    merger.push_back(word1[i]);
                }
                // Add characters from word2
                merger.push_back(word2[i]);
            }
        }

        return merger;
    }
};
